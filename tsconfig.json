{
  "compilerOptions": {
    "outDir": "./dist/",
    // Подсвечивает все места где не указан тип
    // Однако это не означает, что теперь вовсе нельзя использовать any.
    // Это означает лишь, что в подобных ситуация разработчик должен явно писать any,
    "noImplicitAny": true,
    "module": "ESNext",
    // В какую спецификацию компилируем: для поддержки большинства браузеров
    "target": "es6",
    "jsx": "react-jsx",
    // Компилятор будет обрабатывать не только TS файлы, но и JS файлы
    "allowJs": true,
    // "moduleResolution": "node",
    "moduleResolution": "bundler",
    // Для абсолютного импорта
    "baseUrl": ".",
    "paths": {
      "*": [
        "./src/*"
      ]
    },
    // "strictNullChecks": true,
    /*
    npm install typescript@latest @typescript-eslint/parser@latest @typescript-eslint/eslint-plugin@latest --save-dev  
    */
    // esModuleInterop позволяет работать с пакетами, которые используют
    // common js как с обычными пакетами с помощью import (require() module.export) = common js
    // import Moment from 'moment';
    // без флага esModuleInterop результат undefined
    // console.log(Moment);
    // c флагом результат [object Object]
    // console.log(Moment);
    "esModuleInterop": true,
    // Если какая-либо библиотека не имеет default import,
    // лоадеры вроде ts-loader или babel-loader автоматически создают их
    // вместо такого импорта
    // import * as React from 'react';
    // можно писать такой
    // import React from 'react';
    "allowSyntheticDefaultImports": true,
    "experimentalDecorators": true,
    "emitDecoratorMetadata": true,
    "types": [
      // "vitest/types",
      // "jest",
      // "vitest/globals",
      // "vite/client",
      // "@testing-library/jest-dom/vitest"
    ]
  },
  // "ts-node": {
  //   "compilerOptions": {
  //     "module": "CommonJS"
  //   }
  // },
  "exclude": [
    "node_modules"
  ],
  "include": [
    "src",
    "src/shared/config/test/setupTests.ts"
  ]
}
